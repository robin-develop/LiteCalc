%include
{
#define YYCOVERAGE 1
}


%token_prefix TOK_

%token_type {token *}
%token_destructor{delete $$;}

%extra_argument {result* s}

%parse_accept { /* do nothing*/}

%syntax_error 
{
	std::pair<token, std::list<int>> suggestion{*yyminor, {}};
	for (int i = 0; i < YYNTOKEN; ++i)
	{
		int a = yy_find_shift_action(i, yypParser->yytos->stateno);
		
		if (a !=YY_ERROR_ACTION)
		{
			//std::string str = yyTokenName[i];
			suggestion.second.push_back(i);
		}
	}
	s->suggestions.push_back(suggestion);
}

%parse_failure
{
	s->errors.push_back(L"Parse failed"); 
}

///////////////////////////////////////////////////////////////////////////////
%left PLUS MINUS.
%left TIMES DIVIDE MOD POW.
%left DOT.
%right UMINUS.
%left IDENTITY.


start ::= expr(A). {
	s->node=A;
}

//////////////////////////////////////////////////////////
%type call {exp::exp *}
%destructor call { delete $$; }

call(A) ::= expr(B) DOT IDENTITY(C).{
	A = new exp::caller(B, C->str, nullptr);
	delete C;
}
call(A) ::= expr(B) DOT IDENTITY(C) LPAR RPAR.{
	A = new exp::caller(B, C->str, nullptr);
	delete C;
}
call(A) ::= expr(B) DOT IDENTITY(C) LPAR params(D) RPAR.{
	A = new exp::caller(B, C->str, D);
	delete C;
}

%type params {exp::parameters *}
%destructor params { delete $$; }
params(A) ::= expr(B).{
	A = new exp::parameters(B);
}
params(A) ::= params(B) COMMA expr(C).{
	A = B;
	A->push_back(C);
}


//////////////////////////////////////////////////////////
%type expr {exp::exp *}
%destructor expr { delete $$; }

expr(A) ::= expr(B) PLUS expr(C). {
	A = new exp::add(B, C);
}

expr(A) ::= expr(B) MINUS expr(C). {
	A = new exp::sub(B, C);
}

expr(A) ::= expr(B) TIMES expr(C). {
	A = new exp::mul(B, C);
}

expr(A) ::= expr(B) DIVIDE expr(C). {
	A = new exp::div(B, C);
}

expr(A) ::= expr(B) MOD expr(C). {
	A = new exp::mod(B, C);
}

expr(A) ::= call(B). {
	A = B;
}

expr(A) ::= MINUS expr(B). [UMINUS]{
	A = new exp::negative(B);
}

expr(A) ::= LPAR expr(B) RPAR. {
	A = B;
}

expr(A) ::= number(B). {
	A = B;
}

//////////////////////////////////////////////////////////
%type number {exp::exp *}
%destructor number { delete $$; }

number(A) ::= NUMBER(B).{
	A = new exp::number(B->num);
	delete B;
}